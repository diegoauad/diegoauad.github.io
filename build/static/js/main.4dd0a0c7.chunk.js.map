{"version":3,"sources":["redux/language/index.js","redux/terminal/index.js","components/TerminalLine/index.js","components/Nav/index.js","components/Preloader/index.js","utils/index.js","App.js","app/store.js","serviceWorker.js","index.js"],"names":["config","require","initialState","value","default_to","switching","languageSlice","createSlice","name","reducers","setLang","state","payload","lang","split","toLowerCase","available_in","includes","console","log","actions","getLang","language","path","input","busy","branch","undefined","terminalSlice","setInput","setPath","setBranch","getInput","terminal","getPath","getBranch","typeInCommand","newText","dispatch","getState","currentText","currentLength","length","steps","substring","push","i","setTimeout","i18n","TerminalLine","props","useSelector","l","className","you","window","location","hostname","style","borderLeftColor","visibility","dangerouslySetInnerHTML","__html","Nav","useDispatch","useState","attemptingCd","setAttemptingCd","showMenu","onClick","dir","timeout","setCd","about","en","command","attemptCd","blog","comingSoon","Preloader","arrow","bar","string","setString","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","duration","padEnd","user","App","contentReady","setContentReady","changingLanguage","setLanguageChangeMode","downloadingCV","setCVDownloadMode","menuReady","setMenuReady","buttonsReady","setButtonsReady","setLanguage","enable_menu","scrollTo","browserLang","navigator","src","alt","greeting","messages","map","message","contact","item","target","rel","href","link","icon","display","fullName","Date","getFullYear","cv","cvDisplay","download","downloadCV","switchLanguage","languageNames","es","store","configureStore","reducer","languageReducer","terminalReducer","Boolean","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4dd0a0c7.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\nconst config = require('../../config/i18n.json');\n\n// Slice controlling the selected language in the application\n\nconst initialState = {\n  value: config.default_to,\n  switching: false\n};\n\nexport const languageSlice = createSlice({\n  name: 'language',\n  initialState,\n  reducers: {\n    setLang: (state, payload) => {\n      const lang = payload.payload.split('-')[0].toLowerCase()\n      if(config.available_in.includes(lang)) {\n        state.value = lang;\n      } else {\n        console.log(`Unable to set language to \"${lang}\"`);\n      }\n    }\n  }\n});\n\nexport const { setLang } = languageSlice.actions;\n\nexport const getLang = (state) => state.language.value\n\nexport default languageSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\nconst config = require('../../config/terminal.json');\n\n// Slice controlling the selected language in the application\n\nconst initialState = {\n  path: config.path,\n  input: config.input,\n  busy: false,\n  branch: undefined\n};\n\nexport const terminalSlice = createSlice({\n  name: 'terminal',\n  initialState,\n  reducers: {\n    setInput: (state, payload) => {\n      state.input = payload.payload\n    },\n    setPath: (state, payload) => {\n      state.path = payload.payload\n    },\n    setBranch: (state, payload) => {\n      state.branch = payload.payload\n    },\n  }\n});\n\nexport const { setInput, setPath, setBranch } = terminalSlice.actions;\n\nexport const getInput = (state) => state.terminal.input\nexport const getPath = (state) => state.terminal.path\nexport const getBranch = (state) => state.terminal.branch\n\nexport const typeInCommand = newText => (dispatch, getState) => {\n  var currentText = getState().terminal.input;\n  var currentLength = currentText.length;\n  var steps = [];\n  const delay = 50;\n\n  if(newText !== currentText) {\n    while(currentLength > 0 && currentText !== newText.substring(0, currentLength)) {\n      currentText = currentText.substring(0, currentLength - 1);\n      steps.push(currentText);\n      currentLength = currentText.length;\n    }\n  \n    while(currentText !== newText) {\n      currentLength += 1;\n      currentText = newText.substring(0, currentLength);\n      steps.push(currentText);\n    }\n  }\n\n  for(var i = 0; i < steps.length; i++) setTimeout(dispatch, delay * i, setInput(steps[i]));\n\n  return(steps.length * delay);\n};\n\nexport default terminalSlice.reducer;\n","import { React } from 'react';\r\n\r\n// ==== Redux - state management\r\nimport { useSelector } from 'react-redux';\r\n\r\nimport './style.css';\r\n\r\n// ==== Redux\r\nimport {\r\n    getPath,\r\n    getInput,\r\n    getBranch\r\n} from '../../redux/terminal';\r\n\r\nimport {\r\n    getLang,\r\n} from '../../redux/language';\r\n\r\n// Config\r\nconst i18n = require('../../config/i18n.json');\r\n\r\nfunction TerminalLine(props) {\r\n    const path = useSelector(getPath);\r\n    const l = useSelector(getLang);\r\n    const input = useSelector(getInput);\r\n    const branch = useSelector(getBranch);\r\n\r\n    return (\r\n        <div className=\"terminal-line\">\r\n            <span className = 'terminal-crumb user'>\r\n                <span className = \"terminal-text\">{`${i18n.you[l]}@${window.location.hostname}`}</span>\r\n            </span>\r\n            <span className = 'terminal-crumb path'>\r\n                <span className = \"terminal-text\">{path + (props.path || '')}</span>\r\n            </span>\r\n            {branch && <span className = 'terminal-crumb master'>\r\n                <span className = \"terminal-text\"><i className=\"fas fa-code-branch\"></i>{branch}</span>\r\n            </span>}\r\n            <span className = 'terminal-crumb last' style = {branch ? {} : {borderLeftColor: 'rgb(52, 101, 164)'}}>\r\n                <span style={{visibility: 'hidden'}}>.</span>\r\n            </span>\r\n            <span className = \"terminal-text\"><span dangerouslySetInnerHTML = {{__html: input + ''}}></span><span className = \"cursor blink\">▌</span></span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TerminalLine;\r\n","import { React, useState } from 'react';\r\nimport './style.css';\r\n\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport TerminalLine from '../TerminalLine';\r\n\r\nimport {\r\n  getLang\r\n} from '../../redux/language';\r\n\r\nimport {\r\n  typeInCommand,\r\n  setInput\r\n} from '../../redux/terminal';\r\n\r\nconst i18n = require('../../config/i18n.json');\r\n\r\nfunction Nav(props) {\r\n  const l = useSelector(getLang);\r\n  const dispatch = useDispatch();\r\n\r\n  const [attemptingCd, setAttemptingCd] = useState(0);\r\n\r\n  const attemptCd = (dir) => {\r\n    if(attemptingCd === 0) {\r\n      const command = 'cd ../' + dir;\r\n      const timeout = dispatch(typeInCommand(command));\r\n\r\n      setAttemptingCd(timeout);\r\n      setTimeout(dispatch, timeout + 500, setInput(`${command}<br />cd: Cannot access '${command}': Permission denied`));\r\n      setTimeout(dispatch, timeout + 2000, setInput(''));\r\n      setTimeout(setAttemptingCd, timeout + 2000, 0);\r\n    }\r\n  }\r\n\r\n  const setCd = (dir) => {\r\n    if(attemptingCd === 0) {\r\n      const command = 'cd ../' + dir;\r\n      const timeout = dispatch(typeInCommand(command));\r\n\r\n      setAttemptingCd(timeout);\r\n      setTimeout(dispatch, timeout + 1000, setInput(''));\r\n      setTimeout(setAttemptingCd, timeout + 1000, 0);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className = \"nav\">\r\n        <div className = \"content flex-row\">\r\n            <TerminalLine />\r\n            <div style = {{visibility: (props.showMenu ? 'visible' : 'hidden')}} className = \"menu flex-row\">\r\n                <span onClick = {() => setCd(i18n.about.en)} className = \"menu-choice active\">{i18n.about[l]}</span>\r\n                <span onClick = {() => attemptCd('.' + i18n.blog[l])} className = \"menu-choice soon\">{i18n.blog[l]}<span className = 'soon-tag wobble'>{i18n.comingSoon[l]}</span></span>\r\n                {/* <a className = \"menu-choice\"  href='/contact'>{i18n.contact[l]}</a> */}\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Nav;\r\n","import { React, useState } from 'react';\r\n\r\nimport { useInterval } from '../../utils';\r\n\r\nfunction Preloader(props) {\r\n  const arrow = props.arrow || '>';\r\n  const bar = props.bar || '=';\r\n  const [string, setString] = useState('');\r\n\r\n  useInterval(() => {\r\n    setString(string + bar);\r\n  }, props.duration / 10);\r\n\r\n  return (\r\n    <span>\r\n      [{(string + arrow).padEnd(10, '-')}]\r\n    </span>\r\n  );\r\n}\r\n\r\nexport default Preloader;\r\n","import { useEffect, useRef } from 'react';\r\n\r\n// Thank you Dan Abramov for this awesome custom hook\r\n\r\nexport function useInterval(callback, delay) {\r\n    const savedCallback = useRef();\r\n  \r\n    // Remember the latest callback.\r\n    useEffect(() => {\r\n      savedCallback.current = callback;\r\n    }, [callback]);\r\n  \r\n    // Set up the interval.\r\n    useEffect(() => {\r\n      function tick() {\r\n        savedCallback.current();\r\n      }\r\n      if (delay !== null) {\r\n        let id = setInterval(tick, delay);\r\n        return () => clearInterval(id);\r\n      }\r\n    }, [delay]);\r\n  }","import { React, useEffect, useState } from 'react';\n\n// ==== Redux - state management\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  setLang,\n  getLang,\n} from './redux/language';\n\nimport {\n  typeInCommand,\n  setInput,\n  setPath,\n  setBranch\n} from './redux/terminal';\n\n// ==== Components\nimport Nav from './components/Nav';\nimport Preloader from './components/Preloader';\n\n// ==== CSS\nimport './index.css';\n\nconst i18n = require('./config/i18n.json');\nconst user = require('./config/user.json');\nconst terminal = require('./config/terminal.json');\n\nfunction App() {\n  const l = useSelector(getLang);\n  const dispatch = useDispatch();\n\n  const [contentReady, setContentReady] = useState(false);\n  const [changingLanguage, setLanguageChangeMode] = useState(0);\n  const [downloadingCV, setCVDownloadMode] = useState(0);\n  const [menuReady, setMenuReady] = useState(false);\n  const [buttonsReady, setButtonsReady] = useState(false);\n\n  const setLanguage = (lang, enable_menu = false) => {\n    window.scrollTo(0, 0);\n\n    if(changingLanguage === 0 && downloadingCV === 0 && (buttonsReady || enable_menu)) {\n  \n        const timeout = dispatch(typeInCommand(`sudo update-locale LANG=${lang}.UTF-8`));\n        setLanguageChangeMode(timeout + 2000)\n  \n        setTimeout(dispatch, timeout + 2000, setLang(lang));\n        setTimeout(dispatch, timeout + 2000, setInput(''));\n        setTimeout(dispatch, timeout + 2000, typeInCommand(terminal.input));\n        setTimeout(setLanguageChangeMode, timeout + 2000, 0);\n\n        if(enable_menu) {\n          setTimeout(() => {\n            const timeout = dispatch(typeInCommand('ls -a ..'));\n\n            setTimeout(() => {\n              dispatch(setInput(''));\n              setMenuReady(true);\n              setButtonsReady(true);\n            }, timeout + 1000)\n          }, timeout + 3000, 0);\n        }\n    }\n  }\n  \n  useEffect(() => {\n    var browserLang = navigator.language.split('-')[0].toLowerCase();\n\n    if(!i18n.available_in.includes(browserLang)) {\n      browserLang = i18n.default_to;\n    }\n\n    dispatch(setLang(browserLang === 'es' ? 'en' : 'es'))\n\n    const timeout = dispatch(typeInCommand('cd ~/about && cat about.md'));\n\n    setTimeout(() => {\n        setContentReady(true);\n        dispatch(setInput(''));\n        dispatch(setPath('~/about'));\n        dispatch(setBranch(terminal.branch));\n        setTimeout(setLanguage, 1000, browserLang, true);\n      },\n      timeout + 1000\n    );\n\n  }, []);\n\n  const cvDownload = () => {\n    window.scrollTo(0, 0);\n\n    if(downloadingCV === 0 && changingLanguage === 0 && contentReady && buttonsReady) {\n\n      const timeout = dispatch(typeInCommand(`curl ${user.cvDisplay}`));\n      setCVDownloadMode(timeout + 2000)\n\n      setTimeout(dispatch, timeout + 2000, setInput(''));\n      setTimeout(dispatch, timeout + 2000, typeInCommand(terminal.input));\n      setTimeout(setCVDownloadMode, timeout + 2000, 0);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <Nav showMenu = {menuReady} />\n      { contentReady && <div className = \"about content flex-row\">\n        <img className = 'about-img' src = 'assets/img/yo.jpg' alt = {user.name} />\n        <div className = \"messages\">\n          <h1 className = 'message'>{i18n.greeting[l]} <span className = \"emphasize\">{user.name}</span>!</h1>\n          {i18n.messages.map((message, i) =><div key = {'message' + i} className = 'message' dangerouslySetInnerHTML = {{__html: message[l]}}></div>)}\n          <div className = 'message'>\n            {i18n['contact-me'][l]}<br /><br />\n            <div className = \"flex-row contact\">\n              {user.contact.map(item => <div key = {item.display}>\n                <a target = \"_blank\" rel=\"noopener noreferrer\" href={item.link}><i className={item.icon}></i>\n                <br />\n                {item.display}</a>\n              </div>)}\n            </div>\n          </div>\n        </div>\n      </div> }\n      <footer>\n        <span>{user.fullName} ©️ {new Date().getFullYear()}</span>\n        {downloadingCV > 0 ?\n          <Preloader duration = {downloadingCV} /> : \n          buttonsReady && <a href={user.cv} target='__blank' className = 'button' onClick = {cvDownload} download = \"Diego_Martin_CV.pdf\">\n            {i18n.downloadCV[l]}\n            <span className = 'button-ico'>📂</span>\n          </a>\n        }\n        {changingLanguage > 0 ? \n          <Preloader duration = {changingLanguage} /> :\n          buttonsReady && <span className = 'button' onClick = {() => setLanguage(l === 'es' ? 'en' : 'es')}>\n          {i18n.switchLanguage[l]}\n          <span className = {'flag-gradient ' + (l === 'es' ? 'en' : 'es')}> {l === 'es' ? i18n.languageNames.en : i18n.languageNames.es }</span><span className = 'button-ico'>🌐</span>\n        </span>}\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { configureStore } from '@reduxjs/toolkit';\nimport languageReducer from '../redux/language';\nimport terminalReducer from '../redux/terminal';\n\nexport const store = configureStore({\n  reducer: {\n    language: languageReducer,\n    terminal: terminalReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();"],"sourceRoot":""}